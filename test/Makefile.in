# Makefile.in generated by automake 1.11.1 from Makefile.am.
# @configure_input@

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,
# Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@

# Copyright (c) 2010 / 2011 eZuce, Inc. All rights reserved.
# Contributed to SIPfoundry under a Contributor Agreement
#
# This software is free software; you can redistribute it and/or modify it under
# the terms of the Affero General Public License (AGPL) as published by the
# Free Software Foundation; either version 3 of the License, or (at your option)
# any later version.
#
# This software is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
# details.
# 
# Very generic utility functions that should be in automake/gnumake
#

# Initial Version Copyright (C) 2011 eZuce, Inc., All Rights Reserved.
# Licensed to the User under the LGPL license.
# 
#############################################################################################
# Java directories should include this.  This is based on the java support that comes with automake, which
# is known to be very limited. I've expanded on the java targets and tried to keep automake conventions
# like inventing variable conventions.
#
# It's useful to talk about 4 different types of targets: 
# I.) Compiling
# II.) Building a jar
# III.) Running arbitrary java commands. example: generating java source from WSDL file
# IV.) Unit testing
#
#
# I.)  C O M P I L I N G
# =======================
# Required variables:
# -----------------------
# noinst_DATA = javac-foo
#        noinst_DATA is a special autoconf targets that means autoconf will not try to install anything
# 	 but will still build something.  This is typical for java projects as you generally install jar
#        files. 
#
#        The segment "javac-" is important to activate the javac compiling targets. Only use "javac-"
#        when you need to compile java source.
#
#        The name "foo" is arbitrary but will control the names of the other variables.
#        
#        You can include as many targets in noinst_DATA as you want, even non-javac targets
#
# foo_SRC = a.java b.java
#        This will be used in the call to javac and will build a dependency so if source is changed
#        make will know to recompile everything.
#
#        Normally listing every java file is a pain, so a quick find command is often helpful
#        
#               Example:
#                 noinst_DATA = javac-foo
#                 foo_SRC = $(shell cd $(srcdir); find -name '*.java')
#
# foo_DEPS = jar1.jar jar2.jar dir1
#        List of jars to put on CLASSPATH required for compiling.  See JavaDep make command for easy
#        management
#
# Optional variables:
# ----------------------
# foo_ENV = "VARIABLE1=VALUE1 VARIABLE2=VALUE2"
#        If your compile target need special environment variables, you can set them here. Good example
#        maybe JNI projects that need to load shared libraries
#      
#       Example:
#       foo_ENV = ""
#
# foo_JAVACFLAGS
#       If you want to specify certain flags to the compiler
#
# foo_JAVAROOT = someplace
#        Where the class files go
#
# javac-foo-clean :
#         # some clean up code. If you don't override this, make will automatically delete
#         # javac timestamp file and $(foo_JAVAROOT)
#
#
# II.) B U I L D I N G  A  J A R
# ===================================
# Most of this is just support that come with automake already.
#
# foodir = /path/to/install/in
#    This is a automake convention, where "foo" is an arbitrary name and "dir" means this variable
#    that will have an installation phase.  Again, this is standard automake conventions
#
# foo_DATA = jarfile.jar
#    Standard linking between file to build and "foo" target
#
# jarfile.jar : 
#    jar -cf jarfile.jar -C classes .
#
# Recommended Options:
#----------------------
# To add a manifest
#    jarfile.jar : Manifest.txt
#        jar -cfm jarfile.jar Manifest.txt -C $(foo_JAVAROOT) .
#
# To provide a dependency between compile and jarfile so when the source changes and gets recompiled
# the jar file also gets created.  To do this, the targets to compile and jar need to be in the same
# Makefile
#
#    noinst_DATA = javac-foo
#    jardir = /some/place
#    jar_DATA = jarfile.jar
#    jarfile.jar : javac-foo
#           jar -cfm jarfile.jar Manifest.txt -C $(foo_JAVAROOT) .
#
#
# III.) R U N N I N G   J A V A
# ============================================
#  Modled after javac- targets, you need to define a java- target. Unlike javac- though, you need
#  to also define that java- actual recipe.  There is a helper command to build most of the 
#  java target for you
#     noinst_DATA = java-foo
#     foo_DEPS = $(foo_JAVAROOT) jarfile.jar
#     java-foo :
#           $(call JavaCommand, foo) org.example.Birds
#
#  Optional variables:
#  --------------------
#   foo_JAVAFLAGS - Flags to pass to java command including profilers and debuggers
#
#   foo_ENV - Set the environment variables. See section "I.) Compiling"  for format and example
#
#   java-foo-clean :
#          # some clean up code
#
#
#  IV.) U N I T  T E S T I N G
#  =============================
#  Declare the exact target and variables
#
#    noinst_DATA = javac-test   
#    test_DEPS = junit.jar jarfile.jar
#    test_SRC = SomeTest.java AnotherTest.java
#
#############################################################################################

VPATH = @srcdir@
pkgdatadir = $(datadir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkglibexecdir = $(libexecdir)/@PACKAGE@
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in \
	$(top_srcdir)/config/java.am $(top_srcdir)/config/utility.am \
	$(top_srcdir)/src/common.am
subdir = test
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/config/general.m4 \
	$(top_srcdir)/config/check_jdk.m4 \
	$(top_srcdir)/config/sipXlib.m4 $(top_srcdir)/config/java2.m4 \
	$(top_srcdir)/config/ax_check_java_plugin.m4 \
	$(top_srcdir)/config/ax_java_check_class.m4 \
	$(top_srcdir)/config/ax_java_options.m4 \
	$(top_srcdir)/config/ax_prog_java_cc.m4 \
	$(top_srcdir)/config/ax_prog_javac.m4 \
	$(top_srcdir)/config/ax_prog_javac_works.m4 \
	$(top_srcdir)/config/ax_prog_javadoc.m4 \
	$(top_srcdir)/config/ax_prog_javah.m4 \
	$(top_srcdir)/config/ax_prog_java.m4 \
	$(top_srcdir)/config/ax_prog_java_works.m4 \
	$(top_srcdir)/config/ax_try_compile_java.m4 \
	$(top_srcdir)/config/ax_try_run_javac.m4 \
	$(top_srcdir)/config/sipXlib2.m4 $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
SOURCES =
DIST_SOURCES =
DATA = $(noinst_DATA)
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = @ACLOCAL@
AMTAR = @AMTAR@
AUTOCONF = @AUTOCONF@
AUTOHEADER = @AUTOHEADER@
AUTOMAKE = @AUTOMAKE@
AWK = @AWK@
CPPUNIT_CFLAGS = @CPPUNIT_CFLAGS@
CPPUNIT_LDFLAGS = @CPPUNIT_LDFLAGS@
CYGPATH_W = @CYGPATH_W@
DEFS = @DEFS@
ECHO_C = @ECHO_C@
ECHO_N = @ECHO_N@
ECHO_T = @ECHO_T@
ENDIF = @ENDIF@
GCJ_OPTS = @GCJ_OPTS@
IF = @IF@
IFDEF = @IFDEF@
IFNDEF = @IFNDEF@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
JAVA = @JAVA@
JAVAC = @JAVAC@
JAVA_CC = @JAVA_CC@
JAVA_CC_FLAGS = @JAVA_CC_FLAGS@
JAVA_CC_OPTS = @JAVA_CC_OPTS@
JAVA_DEP = @JAVA_DEP@
LIBOBJS = @LIBOBJS@
LIBS = @LIBS@
LTLIBOBJS = @LTLIBOBJS@
MAKEINFO = @MAKEINFO@
MKDIR_P = @MKDIR_P@
OPENFIRE_HOME = @OPENFIRE_HOME@
PACKAGE = @PACKAGE@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_REVISION = @PACKAGE_REVISION@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_VERSION = @PACKAGE_VERSION@
PATH_SEPARATOR = @PATH_SEPARATOR@
SET_MAKE = @SET_MAKE@
SHELL = @SHELL@
SIPXECS_NAME = @SIPXECS_NAME@
SIPXPBXGROUP = @SIPXPBXGROUP@
SIPXPBXUSER = @SIPXPBXUSER@
SIPX_BACKUPBINDIR = @SIPX_BACKUPBINDIR@
SIPX_BINDIR = @SIPX_BINDIR@
SIPX_CFDATA = @SIPX_CFDATA@
SIPX_CFINPUTS = @SIPX_CFINPUTS@
SIPX_CFMODULES = @SIPX_CFMODULES@
SIPX_CONFDIR = @SIPX_CONFDIR@
SIPX_DATADIR = @SIPX_DATADIR@
SIPX_DBDIR = @SIPX_DBDIR@
SIPX_DOCDIR = @SIPX_DOCDIR@
SIPX_INCDIR = @SIPX_INCDIR@
SIPX_INTEROP = @SIPX_INTEROP@
SIPX_IVRDATADIR = @SIPX_IVRDATADIR@
SIPX_JAVADIR = @SIPX_JAVADIR@
SIPX_LIBDIR = @SIPX_LIBDIR@
SIPX_LIBEXECDIR = @SIPX_LIBEXECDIR@
SIPX_LOGDIR = @SIPX_LOGDIR@
SIPX_RPM_CONFIGURE_OPTIONS = @SIPX_RPM_CONFIGURE_OPTIONS@
SIPX_RUNDIR = @SIPX_RUNDIR@
SIPX_SERVICEDIR = @SIPX_SERVICEDIR@
SIPX_SNAPSHOTBINDIR = @SIPX_SNAPSHOTBINDIR@
SIPX_TMPDIR = @SIPX_TMPDIR@
SIPX_VARDIR = @SIPX_VARDIR@
SIPX_VARLIB = @SIPX_VARLIB@
SIPX_VXMLDATADIR = @SIPX_VXMLDATADIR@
STRIP = @STRIP@
USE_IBM_JVM = @USE_IBM_JVM@
UUDECODE = @UUDECODE@
VERSION = @VERSION@
abs_builddir = @abs_builddir@
abs_srcdir = @abs_srcdir@
abs_top_builddir = @abs_top_builddir@
abs_top_srcdir = @abs_top_srcdir@
ac_ct_JAVA_CC = @ac_ct_JAVA_CC@
am__leading_dot = @am__leading_dot@
am__tar = @am__tar@
am__untar = @am__untar@
bindir = @bindir@
build_alias = @build_alias@
builddir = @builddir@
datadir = @datadir@
datarootdir = @datarootdir@
docdir = @docdir@
dvidir = @dvidir@
exec_prefix = @exec_prefix@
host_alias = @host_alias@
htmldir = @htmldir@
includedir = @includedir@
infodir = @infodir@
install_sh = @install_sh@
libdir = @libdir@
libexecdir = @libexecdir@
localedir = @localedir@
localstatedir = @localstatedir@
mandir = @mandir@
mkdir_p = @mkdir_p@
oldincludedir = @oldincludedir@
pdfdir = @pdfdir@
prefix = @prefix@
program_transform_name = @program_transform_name@
psdir = @psdir@
sbindir = @sbindir@
sharedstatedir = @sharedstatedir@
srcdir = @srcdir@
sysconfdir = @sysconfdir@
target_alias = @target_alias@
top_build_prefix = @top_build_prefix@
top_builddir = @top_builddir@
top_srcdir = @top_srcdir@
wwwdir = @wwwdir@
utility_am_required = 

# Lowercase something
#
# Example:
#   dog = $(call lowercase, DoG)
#
lowercase = $(shell echo $(1) | tr '[:upper:]' '[:lower:]')

# Capitalize first letter
#
# Example:
#   DogHouse = $(call propercase, dogHouse)
propercase = $(shell echo $(1) | sed 's/\([a-z]\)/\U\1/')

# Useful when you need a variable to represent the 'space' character
#
# Example: Create a PATH
#   CLASSPATH = $(subst $(space),:,$(JARS))
#
empty := 
space := $(empty) $(empty)

# Lists common variable names defined in sipx projects
CommonVariablesNames = \
	VERSION \
	PREFIX \
	BASH \
	PERL \
	RUBY \
	$(filter SIPX%,$(.VARIABLES)) \
	$(filter %DIR,$(.VARIABLES)) \
	$(filter POSTGRES%,$(.VARIABLES)) \
	$(filter SELINUX%,$(.VARIABLES)) \
	$(filter GEM%,$(.VARIABLES)) \
	$(filter FREESWITCH%,$(.VARIABLES)) \
	$(filter OPENFIRE%,$(.VARIABLES)) \
	$(filter APACHE%,$(.VARIABLES)) \
	$(filter PACKAGE%,$(.VARIABLES)) \
	$(filter-out am__%,$(filter %dir,$(.VARIABLES)))


# Search and replace @VAR@ in a file with common or explicit make variables
#  arg1 - input file
#  arg2 - output file
#  [arg3] - optional:  space delimitted list of addtional autoconf variable names to add search/replace.
#           this is in addtion to ones listed in $(CommonVariableNames)
#
# Examples:
#  $(call SearchAndReplace, infile, outfile)
#  $(call SearchAndReplace, $<, $@)
#  $(call SearchAndReplace, $<, $@, MYVAR1 MYVAR2)
SearchAndReplace = \
	sed $(foreach V,$3 $(CommonVariablesNames), -e 's|@$(V)\@|$($(V))|g') $1 > $2


# Remove a list of directories if they exist
# Examples
#   java-foo-clean :
#   	$(call CleanDirs,out1 out2)
CleanDirs = \
	$(foreach D,$1,! test -d $(D) || rm -r $(D);)


# Remove a list of files if they exist
# Examples
#   java-foo-clean :
#   	$(call CleanFiles,file1 file2)
CleanFiles = \
	$(foreach F,$1,! test -f $(F) || rm $(F);)


#
#   D E P E N D E N C I E S
#
# Turn a space separated list into a colon separated value used for classpaths
#
# Example: $(call ClassPath, jar1 jar2)
#
ClassPath = $(subst $(space),:,$1)

# Turn a space separated list into an environment variable definition.
#
# Example: $(call ClassPathEnv, jar1 jar2)
#
ClassPathEnv = CLASSPATH=$$CLASSPATH:$(call ClassPath,$1)

# Set the CLASSPATH environment variable after using jrepo utility to resolve all 
# jar files
#
# Example:  
#    foo_DEPS=$(call JavaDep, dir1 dir2, pkg1 pkg2)
#
JavaDep = $(shell @JAVA_DEP@ $(foreach D,$1,-d $(D)) $2)

# 
#   C O M P I L E
#
# default location only. Simply define foo_JAVAROOT to send javac of foo elsewhere.
JAVAROOT = $(firstword $($*_JAVAROOT) classes)

# Haven't tested this yet, but could be handy at some point.
JAVADBG = -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=4243

# Construct the first portion of the java command preparing all the standard env. variables and 
# possible override options.
#
# Example:
#   foo_DEPS = jar1 jar2
#   some-target : $(some-source) Makefile
#            $(call JavaCommand,foo) org.example.Birds --some-option $(some-source)
#
# WARNING:
#    correct   : $(call JavaCommand,foo)
#    incorrect : $(call JavaCommand, foo)
#
JavaCommand = $($1_ENV) $(call ClassPathEnv,$($1_DEPS)) $(JAVA) $($1_JAVAFLAGS) $(JAVAFLAGS)

# Text based runner in junit 4. Runs 3.x and 4.x unit tests.
TEST_RUNNER = org.sipfoundry.commons.util.VerboseJUnitRunner

# Selects all tests with names that in in Test. You don't have to specify package name unless you want to
# specify a test in a specific package. 
# DEV NOTE: TESTS name would make more sense as a var name but it's reserved by automake to mean something else.
#
# Example to override: 
#  make check TEST="Test1 Test2"
TEST = Test

# Uses makes glob filters to select a set of tests. When overriding, you can only have one '%' sign
# to filter on but you can combine multiple filters
#  Examples:
#    make check TEST_FILTER="org.example.pkg2.%Test org.example.pkg1.%Test"
#    make check TEST_FILTER="%CdrTest org.example.%LogTest"
TEST_FILTER = $(addprefix %,$(TEST))

# Turns list of java source files into their respective class names
#  ./com/example/FooTest.java  ->  com.example.FooTest
ALL_TESTS = $(subst /,.,$(subst ./,$(empty),$(patsubst %.java,%,$(test_SRC))))

# final lists of tests to run. Useful to overide only if you specify full test package name
# make check JAVA_TESTS="org.example.Test1 org.example.Test2"
JAVA_TESTS = $(filter $(TEST_FILTER),$(ALL_TESTS))
FIND_BAD_TEST = 
stylecmd_PKGS = \
	checkstyle \
	google-collection \
	commons-beanutils-core \
	commons-cli \
	commons-logging \
	antlr

stylecmd_DEPS = \
	$(call JavaDep,@SIPX_JAVADIR@/sipXcommons,$(stylecmd_PKGS)) \
	$(style_DEPS)


# Jar command has a strange CLI interface, in this case:
#   jar my.jar -C dir file1 file2
# file1 is found in dir but file2 is found in cwd. So you have to do this
#   jar my.jar -C dir file1 -C dir file2
# So here we compensate for this strange behaviour and expand out "dir" for each file and
# let you chain the lists together
#
#  Example:
#  jar my.jar \
#    $(call JarInclude,$(JAVAROOT),.) \
#    $(call JarInclude,$(srcdir),$(resources))
#
JarInclude = $(foreach D,$2,-C $(1) $(D))
JAR_LIBSRC = ~/libsrc
yealink_PKGS = \
	log4j \
	dom4j \
	commons-lang \
	commons-io \
	commons-collections \
	org.springframework.beans \
	sipxcommons \
	sipxconfig-neoconf \
	velocity

EXTRA_DIST = \
	$(test_SRC) \
	$(test_RESOURCES)

noinst_DATA = javac-test
test_PKGS = \
	$(yealink_PKGS) \
	sipxconfig-test

test_DEPS = \
	$(JAVAROOT) \
	../src/classes \
	$(srcdir)/../src \
	$(srcdir) \
	$(call JavaDep,@SIPX_JAVADIR@/sipXcommons @SIPX_JAVADIR@/sipXconfig, $(test_PKGS))

test_JAVAFLAGS = -Dclasspath.dir=$(srcdir) -Dbasedir=$(top_builddir)
test_SRC = $(shell cd $(srcdir); find org -name '*.java')
test_RESOURCES = $(shell cd $(srcdir); find org -not -name '*.java')
local.etc.dir = $(abspath $(top_srcdir)/etc)
all: all-am

.SUFFIXES:
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am $(top_srcdir)/config/utility.am $(top_srcdir)/config/java.am $(top_srcdir)/src/common.am $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign test/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign test/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
tags: TAGS
TAGS:

ctags: CTAGS
CTAGS:


distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(DATA)
installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-generic clean-local mostlyclean-am

distclean: distclean-am
	-rm -f Makefile
distclean-am: clean-am distclean-generic

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am:

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am:

.MAKE: install-am install-strip

.PHONY: all all-am check check-am clean clean-generic clean-local \
	distclean distclean-generic distdir dvi dvi-am html html-am \
	info info-am install install-am install-data install-data-am \
	install-dvi install-dvi-am install-exec install-exec-am \
	install-html install-html-am install-info install-info-am \
	install-man install-pdf install-pdf-am install-ps \
	install-ps-am install-strip installcheck installcheck-am \
	installdirs maintainer-clean maintainer-clean-generic \
	mostlyclean mostlyclean-generic pdf pdf-am ps ps-am uninstall \
	uninstall-am


# work around INSTALL limitations
# 1.  create directories before installing file 
# 2.  install path1/file into path2/path1/file, not path2/file
#
# Example
#   install-data-hook:
#        echo "$$Installer" | \
#           InstallFileList="path1/file2 path2/file2" \
#           InstallSourceDir=$(srcdir) \
#           InstallDestDir=$(DESTDIR)$(foodir) \
#           bash
#
define Installer
	for f in $${InstallFileList}; do
	  ThisInstallDir=`dirname $${InstallDestDir}/$$f`
	  $(INSTALL) -d $${ThisInstallDir}
	  $(INSTALL) -t $${ThisInstallDir} $${InstallSourceDir}/$$f
	done;
endef
export Installer

# Recursive targets. will go to each subdir and run
precommit : % : %-recurse

%-recurse :
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  test "$$subdir" = . || ($(am__cd) $$subdir && $(MAKE) $(AM_MAKEFLAGS) $*) || eval 'exit 1'; \
	done

# Require utility.am be included. Do not include it here because having all top-level makefile
# include nec. files helps readablity.  We have to avoid a network of includes that include other
# includes
utility_am_required ?= $(error Please include utility.am)
$(utility_am_required)

.SECONDEXPANSION:

# SECONDEXPANSION will turn $$($$*_SRC) into $(foo_SRC) for target java-compile-foo
%-src : $$($$*_SRC);

# creates a timestamp file so make knows not to recompile
# So you can run "make foo"
javac-% : %-src Makefile
	@list1='$($*_SRC)'; list2=; if test -n "$$list1"; then \
	  for p in $$list1; do \
	    if test -f $$p; then d=; else d="$(srcdir)/"; fi; \
	    list2="$$list2 $$d$$p"; \
	  done; \
	  echo "$$list2" > .$@-files; \
	else \
	  echo "No Source found for make variable $(*)_SRC" >&2; \
	  exit 1; \
	fi
	test -d $(JAVAROOT) || mkdir -p $(JAVAROOT)
	$($*_ENV) $(call ClassPathEnv,$($*_DEPS)) $(JAVAC) -d $(JAVAROOT) $(JAVA_CC_FLAGS) $($*_JAVA_CC_FLAGS) @.$@-files
	echo timestamp > $@
dbg-% : export JAVAFLAGS += $(JAVADBG)
dbg-% : %;

#
#   U N I T  T E S T
#
# To "enable" this check define
#  TEST_SRC - All the source you want compiled for tests to run
#
# and optionally (but most likely)
#  TEST_DEPS
#
check : check-default
check.list-% check-% : TEST = Test$(call propercase,$*)
check.list-default check-default : TEST = Test
check-%  :
	if [ -n "$(JAVA_TESTS)" ]; then \
	  $(MAKE) javac-test; \
	  $(call JavaCommand,test) $(TEST_RUNNER) $(TEST_RUNNER_FLAGS) $(JAVA_TESTS); \
	fi

# When one test influences another causing it to fail, this helps determine which test
# is breaking another by running a single test in between every other test
#
# Example:
#    make find-bad-default-test BROKEN_TEST=FooTest
#
find-bad-%-test : test_JAVAFLAGS = -Dbrokentest=$(filter $(addprefix %,$(BROKEN_TEST)),$(ALL_TESTS))
find-bad-%-test : check-%;

# List the tests that will run. Use when overriding test filters to see what tests will be selected to run
# before actually running them
# Example:
#  make check.list TEST_FILTER=org.example.pkg.%Test2
check.list : check.list-default
check.list-% :
	@echo -e $(subst $(space),'\n',$(JAVA_TESTS))

# Check source conforms to proper syntax
# Add 'style' to precommit target, to check source. By default will check all *.java file below makefile
# but you can change that by defining style_srcdir to the directory to recurse into
style :
	$(call JavaCommand,stylecmd) \
	  -Dtop.dir=$(top_srcdir)/config/checkstyle \
	  com.puppycrawl.tools.checkstyle.Main \
	  -c $(top_srcdir)/config/checkstyle/checkstyle.xml \
	  -r $(addprefix $(srcdir)/,$(style_SRC))

#
#   J A R / M A N I F E S T
#
# To add a standard manifest, just include Manifest.txt in your jar prerequisites and reference
# Manifest.txt in your jar command
#
# Example :
#  my.jar : Manifest.txt
#        jar -cfm Manifest.txt $@ foo
#
Manifest.txt : Makefile
	echo "$$manifest_body" > $@

# Standard manifest body, but to override this, follow this example in your makefile.am
#
#  Example:
#  MyManifest.txt :
#      echo "$$my_manifest" > $@
#
#  define my_manifest
#    $(manifest_body)
#    MyItem: foo
#  endef
#  export my_manifest
#
define manifest_body
Specification-Title: $(PACKAGE_NAME)
Specification-Version: $(PACKAGE_VERSION)
Specification-Vendor:  $(PACKAGE_VENDOR)
Implementation-Title: $(IMPLEMENTATION_TITLE)
Implementation-Version: $(PACKAGE_VERSION).$(PACKAGE_REVISION) $(shell date +%Y-%m-%d%Z%H:%m:%S) $(shell hostname -f)
Implementation-Vendor: $(PACKAGE_VENDOR)
endef
export manifest_body

#
# M I S C.
#

# hook
clean-local : clean-generic

clean-generic :
	! test -d $(JAVAROOT) || rm -rf $(JAVAROOT)
	! test -f javac-* || rm javac-*

$(JAR_LIBSRC) :
	mkdir -p $@

# download source for jar files if available
jar-src : $(JAR_LIBSRC) $(addprefix $(JAR_LIBSRC)/,$(notdir $(JAR_SRCS:=.src)))

jdoc-% : Makefile
	@list1='$($*_SRC)'; list2=; if test -n "$$list1"; then \
	  for p in $$list1; do \
	    if test -f $$p; then d=; else d="$(srcdir)/"; fi; \
	    list2="$$list2 $$d$$p"; \
	  done; \
	  echo "$$list2" > .$@-files; \
	else \
	  echo "No Source found for make variable $(*)_SRC" >&2; \
	  exit 1; \
	fi
	$(call ClassPathEnv,$($*_DEPS)) javadoc -d html @$<

javac-test : test.properties
test.properties : Makefile
	@echo -e "$(subst $(space),\n,$(foreach V,local.etc.dir $(CommonVariablesNames),$(V)=$($(V))))" > $@

precommit : check

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
